apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.services.django.name }}
  labels:
    {{- include "django.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "django.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      {{- with .Values.services.django.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        org.{{ .Chart.Name }}/network: {{ .Release.Name }}-{{ .Release.Namespace }}
        {{- include "django.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - command:
            - /usr/src/{{ .Values.configs.projectName }}/entrypoint.sh          
          args:
            - uwsgi
            - "--ini"
            {{- if .Values.services.django.uwsgi.override }}
            - /var/run/uwsgi/uwsgi.ini
            {{- else }}
            - /usr/src/{{ .Values.configs.projectName }}/uwsgi.ini
            {{- end }}
          env:
            - name: IS_CELERY
              value: "false"
          envFrom:
            - configMapRef:
                name: {{ include "geonode.configmap" . }}
            - secretRef:
                name: {{ include "geonode.main-secret" . }}
            - secretRef:
                name: {{ include "geonode.database-secret" . }}
            {{- if .Values.configs.mail.enabled }}
            - secretRef:
                name: {{ include "geonode.mail-secret" . }}
            {{- end }}
            {{- if .Values.configs.recaptcha.enabled }}
            - secretRef:
                name: {{ include "geonode.recaptcha-secret" . }}
            {{- end }}
            {{- if .Values.configs.ldap.enabled }}
            - secretRef:
                name: {{ include "geonode.ldap-secret" . }}
            {{- end }}
            {{- if .Values.services.memcached.enabled }}
            - secretRef:
                name: {{ include "geonode.memcached-secret" . }}
            {{- end }}
          {{- with .Values.services.django.image }}
          image: {{ .repository }}:{{ .tag }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          name: {{ .Values.services.django.name }}
          livenessProbe:
            exec:
              command:
                - |-
                  curl --fail --silent --write-out 'HTTP CODE : %{http_code}
                  ' --output /dev/null http://127.0.0.1:8000/
            failureThreshold: 1
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 10
          securityContext:
            {{- toYaml .Values.services.django.securityContext | nindent 12 }}
          ports:
            - name: wsgi
              containerPort: 8000
              protocol: TCP
          resources:
            {{- toYaml .Values.services.django.resources | nindent 12 }}          
          volumeMounts:
            {{- if .Values.services.django.uwsgi.override }}
            - name: uwsgi
              mountPath: /var/run/uwsgi
              readOnly: true
            {{- end }}
            {{- with .Values.volumes }}
            - mountPath: {{ .statics.mountPath }}
              name: statics
            - mountPath: {{ .geoserverData.mountPath }}
              name: geoserver-data-dir
            - mountPath: {{ .backupRestore.mountPath }}
              name: backup-restore
            - mountPath: {{ .data.mountPath }}
              name: data
            - mountPath: {{ .tmp.mountPath }}
              name: tmp
            {{- end }}
      initContainers:
        {{- $dbHost := include "db.hostname" . -}}
        {{- $dbPort := .Values.configs.postgres.port -}}
        {{- with .Values.services.db }}
        - name: wait-for-dbs          
          image: {{ .image.repository }}:{{ .image.tag }}
          imagePullPolicy: {{ .image.pullPolicy }}
          command:
            - sh
            - '-c'
            - >
              until pg_isready -h {{ $dbHost }} -p {{ $dbPort | toString }}
                do echo waiting for database; sleep 2; 
              done
        {{- end }}
      serviceAccountName: {{ include "geonode.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.services.django.podSecurityContext | nindent 8 }}
      restartPolicy: Always
      {{- with .Values.services.django.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.django.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.django.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}      
      volumes:
        {{- if .Values.services.django.uwsgi.override }}
        - name: uwsgi
          configMap:
            name: {{ include "geonode.configmap" . }}-uwsgi
        {{- end }}
        - name: statics
          persistentVolumeClaim:
            claimName: {{ include "geonode.statics-pvc" . }}
        - name: geoserver-data-dir
          persistentVolumeClaim:
            claimName: {{ include "geonode.geoserver-data-pvc" . }}
        - name: backup-restore
          persistentVolumeClaim:
            claimName: {{ include "geonode.backup-restore-pvc" . }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "geonode.data-pvc" . }}
        - name: tmp
          persistentVolumeClaim:
            claimName: {{ include "geonode.tmp-pvc" . }}
status: {}
