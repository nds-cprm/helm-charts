{{- if not .Values.services.db.external }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.services.db.name }}
  labels:
     {{- include "db.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "db.selectorLabels" . | nindent 6 }}
  serviceName: {{ .Values.services.db.name }}
  template:
    metadata:
      {{- with .Values.services.db.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        io.kompose.network/geonode-default: "true"
        {{- include "db.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - args:
            - postgres
            - -c
            - max_connections=$(POSTGRESQL_MAX_CONNECTIONS)
          envFrom:
            - secretRef:
                name: {{ include "geonode.name" . }}-postgres  
          image: {{ .Values.services.db.image.repository }}:{{ .Values.services.db.image.tag | default "latest" }}
          imagePullPolicy: {{ .Values.services.db.image.pullPolicy }}
          livenessProbe:
            exec:
              command:
                - pg_isready
                - '-U'
                - {{ .Values.secrets.postgres.user | quote }}
          name: {{ .Values.services.db.name }}
          securityContext:
            {{- toYaml .Values.services.db.securityContext | nindent 12 }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          resources:
            {{- toYaml .Values.services.db.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
            - mountPath: /pg_backups
              name: db-backups
      serviceAccountName: {{ include "geonode.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.services.db.podSecurityContext | nindent 8 }}
      restartPolicy: Always
      {{- with .Values.services.db.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.db.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.db.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data
        - name: db-backups
          persistentVolumeClaim:
            claimName: db-backups
  updateStrategy: {}
  volumeClaimTemplates:
    - metadata:
        labels:
          {{- include "db.labels" . | nindent 12 }}
        name: db-data
      spec:
        {{- with .Values.services.db.volumes.data }}
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        {{- if .storageClassName }}
        storageClassName: {{ .storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .storage }}
        {{- end }}    
    - metadata:
        labels:
          {{- include "db.labels" . | nindent 12 }}
        name: db-backups      
      spec:
        {{- with .Values.services.db.volumes.backups }}
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        {{- if .storageClassName }}
        storageClassName: {{ .storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .storage }}
        {{- end }}
{{- end }}
